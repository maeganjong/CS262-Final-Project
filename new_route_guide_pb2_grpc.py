# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import new_route_guide_pb2 as new__route__guide__pb2


class CalendarStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.login_user = channel.unary_unary(
                '/routeguide.Calendar/login_user',
                request_serializer=new__route__guide__pb2.Text.SerializeToString,
                response_deserializer=new__route__guide__pb2.Text.FromString,
                )
        self.register_user = channel.unary_unary(
                '/routeguide.Calendar/register_user',
                request_serializer=new__route__guide__pb2.Text.SerializeToString,
                response_deserializer=new__route__guide__pb2.Text.FromString,
                )
        self.display_accounts = channel.unary_stream(
                '/routeguide.Calendar/display_accounts',
                request_serializer=new__route__guide__pb2.Text.SerializeToString,
                response_deserializer=new__route__guide__pb2.Text.FromString,
                )
        self.check_user_exists = channel.unary_unary(
                '/routeguide.Calendar/check_user_exists',
                request_serializer=new__route__guide__pb2.Text.SerializeToString,
                response_deserializer=new__route__guide__pb2.Text.FromString,
                )
        self.delete_account = channel.unary_unary(
                '/routeguide.Calendar/delete_account',
                request_serializer=new__route__guide__pb2.Text.SerializeToString,
                response_deserializer=new__route__guide__pb2.Text.FromString,
                )
        self.logout = channel.unary_unary(
                '/routeguide.Calendar/logout',
                request_serializer=new__route__guide__pb2.Text.SerializeToString,
                response_deserializer=new__route__guide__pb2.Text.FromString,
                )
        self.notify_new_event = channel.unary_stream(
                '/routeguide.Calendar/notify_new_event',
                request_serializer=new__route__guide__pb2.Text.SerializeToString,
                response_deserializer=new__route__guide__pb2.Event.FromString,
                )
        self.schedule_event = channel.unary_unary(
                '/routeguide.Calendar/schedule_event',
                request_serializer=new__route__guide__pb2.Event.SerializeToString,
                response_deserializer=new__route__guide__pb2.Text.FromString,
                )
        self.edit_event = channel.unary_unary(
                '/routeguide.Calendar/edit_event',
                request_serializer=new__route__guide__pb2.Event.SerializeToString,
                response_deserializer=new__route__guide__pb2.Text.FromString,
                )
        self.delete_event = channel.unary_unary(
                '/routeguide.Calendar/delete_event',
                request_serializer=new__route__guide__pb2.Event.SerializeToString,
                response_deserializer=new__route__guide__pb2.Text.FromString,
                )
        self.search_event = channel.unary_stream(
                '/routeguide.Calendar/search_event',
                request_serializer=new__route__guide__pb2.Search.SerializeToString,
                response_deserializer=new__route__guide__pb2.Event.FromString,
                )
        self.replica_client_receive_message = channel.unary_unary(
                '/routeguide.Calendar/replica_client_receive_message',
                request_serializer=new__route__guide__pb2.Text.SerializeToString,
                response_deserializer=new__route__guide__pb2.Text.FromString,
                )
        self.log_update = channel.unary_unary(
                '/routeguide.Calendar/log_update',
                request_serializer=new__route__guide__pb2.Event.SerializeToString,
                response_deserializer=new__route__guide__pb2.Text.FromString,
                )
        self.alive_ping = channel.unary_unary(
                '/routeguide.Calendar/alive_ping',
                request_serializer=new__route__guide__pb2.Text.SerializeToString,
                response_deserializer=new__route__guide__pb2.Text.FromString,
                )
        self.notify_leader = channel.unary_unary(
                '/routeguide.Calendar/notify_leader',
                request_serializer=new__route__guide__pb2.Text.SerializeToString,
                response_deserializer=new__route__guide__pb2.Text.FromString,
                )


class CalendarServicer(object):
    """Missing associated documentation comment in .proto file."""

    def login_user(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def register_user(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def display_accounts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_user_exists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_account(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def notify_new_event(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def schedule_event(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def edit_event(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_event(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def search_event(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def replica_client_receive_message(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def log_update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def alive_ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def notify_leader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CalendarServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'login_user': grpc.unary_unary_rpc_method_handler(
                    servicer.login_user,
                    request_deserializer=new__route__guide__pb2.Text.FromString,
                    response_serializer=new__route__guide__pb2.Text.SerializeToString,
            ),
            'register_user': grpc.unary_unary_rpc_method_handler(
                    servicer.register_user,
                    request_deserializer=new__route__guide__pb2.Text.FromString,
                    response_serializer=new__route__guide__pb2.Text.SerializeToString,
            ),
            'display_accounts': grpc.unary_stream_rpc_method_handler(
                    servicer.display_accounts,
                    request_deserializer=new__route__guide__pb2.Text.FromString,
                    response_serializer=new__route__guide__pb2.Text.SerializeToString,
            ),
            'check_user_exists': grpc.unary_unary_rpc_method_handler(
                    servicer.check_user_exists,
                    request_deserializer=new__route__guide__pb2.Text.FromString,
                    response_serializer=new__route__guide__pb2.Text.SerializeToString,
            ),
            'delete_account': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_account,
                    request_deserializer=new__route__guide__pb2.Text.FromString,
                    response_serializer=new__route__guide__pb2.Text.SerializeToString,
            ),
            'logout': grpc.unary_unary_rpc_method_handler(
                    servicer.logout,
                    request_deserializer=new__route__guide__pb2.Text.FromString,
                    response_serializer=new__route__guide__pb2.Text.SerializeToString,
            ),
            'notify_new_event': grpc.unary_stream_rpc_method_handler(
                    servicer.notify_new_event,
                    request_deserializer=new__route__guide__pb2.Text.FromString,
                    response_serializer=new__route__guide__pb2.Event.SerializeToString,
            ),
            'schedule_event': grpc.unary_unary_rpc_method_handler(
                    servicer.schedule_event,
                    request_deserializer=new__route__guide__pb2.Event.FromString,
                    response_serializer=new__route__guide__pb2.Text.SerializeToString,
            ),
            'edit_event': grpc.unary_unary_rpc_method_handler(
                    servicer.edit_event,
                    request_deserializer=new__route__guide__pb2.Event.FromString,
                    response_serializer=new__route__guide__pb2.Text.SerializeToString,
            ),
            'delete_event': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_event,
                    request_deserializer=new__route__guide__pb2.Event.FromString,
                    response_serializer=new__route__guide__pb2.Text.SerializeToString,
            ),
            'search_event': grpc.unary_stream_rpc_method_handler(
                    servicer.search_event,
                    request_deserializer=new__route__guide__pb2.Search.FromString,
                    response_serializer=new__route__guide__pb2.Event.SerializeToString,
            ),
            'replica_client_receive_message': grpc.unary_unary_rpc_method_handler(
                    servicer.replica_client_receive_message,
                    request_deserializer=new__route__guide__pb2.Text.FromString,
                    response_serializer=new__route__guide__pb2.Text.SerializeToString,
            ),
            'log_update': grpc.unary_unary_rpc_method_handler(
                    servicer.log_update,
                    request_deserializer=new__route__guide__pb2.Event.FromString,
                    response_serializer=new__route__guide__pb2.Text.SerializeToString,
            ),
            'alive_ping': grpc.unary_unary_rpc_method_handler(
                    servicer.alive_ping,
                    request_deserializer=new__route__guide__pb2.Text.FromString,
                    response_serializer=new__route__guide__pb2.Text.SerializeToString,
            ),
            'notify_leader': grpc.unary_unary_rpc_method_handler(
                    servicer.notify_leader,
                    request_deserializer=new__route__guide__pb2.Text.FromString,
                    response_serializer=new__route__guide__pb2.Text.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'routeguide.Calendar', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Calendar(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def login_user(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routeguide.Calendar/login_user',
            new__route__guide__pb2.Text.SerializeToString,
            new__route__guide__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def register_user(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routeguide.Calendar/register_user',
            new__route__guide__pb2.Text.SerializeToString,
            new__route__guide__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def display_accounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/routeguide.Calendar/display_accounts',
            new__route__guide__pb2.Text.SerializeToString,
            new__route__guide__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_user_exists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routeguide.Calendar/check_user_exists',
            new__route__guide__pb2.Text.SerializeToString,
            new__route__guide__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_account(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routeguide.Calendar/delete_account',
            new__route__guide__pb2.Text.SerializeToString,
            new__route__guide__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routeguide.Calendar/logout',
            new__route__guide__pb2.Text.SerializeToString,
            new__route__guide__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def notify_new_event(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/routeguide.Calendar/notify_new_event',
            new__route__guide__pb2.Text.SerializeToString,
            new__route__guide__pb2.Event.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def schedule_event(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routeguide.Calendar/schedule_event',
            new__route__guide__pb2.Event.SerializeToString,
            new__route__guide__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def edit_event(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routeguide.Calendar/edit_event',
            new__route__guide__pb2.Event.SerializeToString,
            new__route__guide__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_event(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routeguide.Calendar/delete_event',
            new__route__guide__pb2.Event.SerializeToString,
            new__route__guide__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def search_event(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/routeguide.Calendar/search_event',
            new__route__guide__pb2.Search.SerializeToString,
            new__route__guide__pb2.Event.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def replica_client_receive_message(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routeguide.Calendar/replica_client_receive_message',
            new__route__guide__pb2.Text.SerializeToString,
            new__route__guide__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def log_update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routeguide.Calendar/log_update',
            new__route__guide__pb2.Event.SerializeToString,
            new__route__guide__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def alive_ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routeguide.Calendar/alive_ping',
            new__route__guide__pb2.Text.SerializeToString,
            new__route__guide__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def notify_leader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routeguide.Calendar/notify_leader',
            new__route__guide__pb2.Text.SerializeToString,
            new__route__guide__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
